import json
import logging
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler, CallbackQueryHandler
from telegram.constants import ParseMode

TOKEN = '8157079413:AAFEH7nL79NTFqJxvsTYK-Kym68HKNxmbDw'  # üîí –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
GAME_SHORT_NAME = 'hacker_run'

app = Flask(__name__)
bot = Bot(token=TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
LEADERBOARD_FILE = 'leaderboard.json'


def load_leaderboard():
    try:
        with open(LEADERBOARD_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


def save_leaderboard(data):
    with open(LEADERBOARD_FILE, 'w') as f:
        json.dump(data, f)


# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ====

def start(update: Update, _):
    keyboard = [[InlineKeyboardButton("‚ñ∂ –ò–≥—Ä–∞—Ç—å", callback_game=GAME_SHORT_NAME)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("üíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Hacker Run*!\n–£–ø—Ä–∞–≤–ª—è–π —Ö–∞–∫–µ—Ä–æ–º –∏ –æ–±–≥–æ–Ω–∏ –≤—Å–µ—Ö!", 
                              parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)


def top(update: Update, _):
    leaderboard = load_leaderboard()
    sorted_scores = sorted(leaderboard.items(), key=lambda x: x[1], reverse=True)[:10]
    if not sorted_scores:
        update.message.reply_text("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤ üò¢")
        return

    text = "üèÜ *–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:*\n\n"
    for i, (user_id, score) in enumerate(sorted_scores, 1):
        text += f"{i}. ID {user_id}: {score} –æ—á–∫–æ–≤\n"

    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)


def shop(update: Update, _):
    update.message.reply_text("üõç –ú–∞–≥–∞–∑–∏–Ω —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!")


def play(update: Update, _):
    update.message.reply_game(game_short_name=GAME_SHORT_NAME)


def callback_query(update: Update, _):
    query = update.callback_query
    if query.game_short_name != GAME_SHORT_NAME:
        query.answer(text="–ù–µ–≤–µ—Ä–Ω–∞—è –∏–≥—Ä–∞.")
        return

    query.answer()
    query.message.reply_game(game_short_name=GAME_SHORT_NAME)


# ==== Flask route –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–∫–æ–≤ ====

@app.route('/score', methods=['POST'])
def receive_score():
    data = request.get_json()
    user_id = data.get('user_id')
    score = data.get('score')

    if not user_id or not isinstance(score, int):
        return {'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}, 400

    leaderboard = load_leaderboard()
    prev_score = leaderboard.get(str(user_id), 0)

    if score > prev_score:
        leaderboard[str(user_id)] = score
        save_leaderboard(leaderboard)

        try:
            bot.set_game_score(user_id=int(user_id), score=score, force=True)
        except Exception as e:
            print(f'[!] –û—à–∏–±–∫–∞ set_game_score: {e}')

    return {'status': 'ok'}


# ==== Telegram webhook ====

@app.route(f"/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "OK"


# ==== –ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ====

dispatcher = Dispatcher(bot=bot, update_queue=None, workers=0, use_context=True)
dispatcher.add_handler(CommandHandler('start', start))
dispatcher.add_handler(CommandHandler('top', top))
dispatcher.add_handler(CommandHandler('shop', shop))
dispatcher.add_handler(CommandHandler('play', play))
dispatcher.add_handler(CallbackQueryHandler(callback_query))


# ==== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ====

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app.run(debug=True, port=5000)
