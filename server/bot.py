import json
import logging
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler, CallbackQueryHandler, MessageHandler, filters

TOKEN = '8157079413:AAFEH7nL79NTFqJxvsTYK-Kym68HKNxmbDw'
bot = Bot(token=TOKEN)
app = Flask(__name__)
dp = Dispatcher(bot, None, workers=0)

LEADERBOARD_FILE = 'leaderboard.json'

def load_leaderboard():
    try:
        with open(LEADERBOARD_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_leaderboard(data):
    with open(LEADERBOARD_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def start(update: Update, context):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Hacker Run!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/play ‚Äî –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/top ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
        "/shop ‚Äî –º–∞–≥–∞–∑–∏–Ω (—Å–∫–æ—Ä–æ)"
    )

def play(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å –≤ Hacker Run", callback_game="HackerRunGame")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:", reply_markup=reply_markup)

def top(update: Update, context):
    leaderboard = load_leaderboard()
    if not leaderboard:
        update.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return
    sorted_scores = sorted(leaderboard.items(), key=lambda x: x[1], reverse=True)[:10]
    text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (user, score) in enumerate(sorted_scores, 1):
        text += f"{i}. {user}: {score} –æ—á–∫–æ–≤\n"
    update.message.reply_text(text)

def shop(update: Update, context):
    update.message.reply_text("–ú–∞–≥–∞–∑–∏–Ω –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

def button_callback(update: Update, context):
    query = update.callback_query
    query.answer()
    # Telegram —Å–∞–º –æ—Ç–∫—Ä–æ–µ—Ç –∏–≥—Ä—É –ø—Ä–∏ callback_game
    # –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–∏–µ callback-–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—à—å

@app.route('/webhook', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dp.process_update(update)
    return 'OK'

@dp.message_handler(commands=['start'])
def cmd_start(update: Update, context):
    start(update, context)

@dp.message_handler(commands=['play'])
def cmd_play(update: Update, context):
    play(update, context)

@dp.message_handler(commands=['top'])
def cmd_top(update: Update, context):
    top(update, context)

@dp.message_handler(commands=['shop'])
def cmd_shop(update: Update, context):
    shop(update, context)

@dp.callback_query_handler()
def cb_handler(update: Update, context):
    button_callback(update, context)

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∏–≥—Ä—ã (POST JSON —Å user –∏ score)
@app.route('/score', methods=['POST'])
def receive_score():
    data = request.json
    user = data.get('user')
    score = data.get('score')
    if not user or not isinstance(score, int):
        return {"status": "error", "message": "Invalid data"}, 400

    leaderboard = load_leaderboard()
    prev_score = leaderboard.get(user, 0)
    if score > prev_score:
        leaderboard[user] = score
        save_leaderboard(leaderboard)
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏ —á–µ—Ä–µ–∑ Telegram Game API
        try:
            bot.set_game_score(user_id=int(user), score=score, force=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ set_game_score: {e}")
    return {"status": "ok"}

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app.run(host='0.0.0.0', port=8443)
